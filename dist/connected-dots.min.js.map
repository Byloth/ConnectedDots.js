{"version":3,"sources":["connected-dots.js"],"names":["Point","coordX","coordY","SIZE","MIN","MAX","ANIM_TIME","_this","this","_animation","originX","originY","x","y","closest","size","Math","random","startAnimation","newCoordX","newCoordY","duration","TweenMax","to","ease","Back","easeInOut","onComplete","killAnimation","kill","ConnectedDots","selectorId","EXIT_COORDS","X","Y","MIN_LINKS","floor","MAX_LINKS","_context","_points","_domElement","document","getElementById","_size","width","height","_mouse","_color","$","data","_getDistance","point1","point2","sqrt","pow","_getMin","num1","num2","num3","initialize","getContext","row","push","x1","length","y1","x2","y2","linked","linkCount","max_links","undefined","updateFrame","timestamp","clearRect","draw","requestAnimationFrame","pointDistance","beginPath","arc","PI","fillStyle","fill","closePath","i","startingDistance","endingDistance","gradient","createLinearGradient","addColorStop","moveTo","lineTo","strokeStyle","stroke","window","mousemove","event","clientX","clientY","mouseout","resize","newWidth","newHeight"],"mappings":"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","file":"connected-dots.min.js","sourcesContent":["/*\n *                 ConnectedDots.JS v. 2.1\n * \n *                Written by Bilotta Matteo.\n * \n *  Copyright Â© 2015 - 2016, Bylothink. All rights reserved.\n */\n\nvar Point = function(coordX, coordY)\n{\n    // Private constants:\n        const SIZE = {\n\n            MIN: 2,\n            MAX: 2\n        };\n        const WOBBING_RANGE = 100;\n        const ANIM_TIME = {\n\n            MIN: 1,\n            MAX: 2\n        };\n\n    // Private properties:\n        var _this = this;\n        var _animation = null;\n\n    // Public properties:\n        this.originX = coordX;\n        this.originY = coordY;\n\n        this.x = coordX;\n        this.y = coordY;\n\n        this.closest = [];\n\n        this.size = (Math.random() * SIZE.MAX) + SIZE.MIN;\n\n    // Public methods:\n        this.startAnimation = function()\n        {\n            var newCoordX = _this.originX + ((Math.random() * WOBBING_RANGE) - (WOBBING_RANGE / 2));\n            var newCoordY = _this.originY + ((Math.random() * WOBBING_RANGE) - (WOBBING_RANGE / 2));\n\n            var duration = ANIM_TIME.MAX * Math.random() + ANIM_TIME.MIN;\n\n            _animation = TweenMax.to(_this, duration, {\n\n                x: newCoordX,\n                y: newCoordY,\n\n                ease: Back.easeInOut,\n\n                onComplete: function()\n                {\n                    _this.startAnimation();\n                }\n            });\n        };\n\n        this.killAnimation = function()\n        {\n            _animation.kill();\n        }\n};\n\nvar ConnectedDots = function(selectorId)\n{\n    // Private Constants:\n        const DRAW_RANGE = 175;\n        const EXIT_COORDS = {\n\n            X: -1920,\n            Y: -1080\n        };\n\n        const MAX_LINKS = 5;\n        const MIN_LINKS = Math.floor(MAX_LINKS / 2);\n\n        const SPACING = 75;\n\n    // Private properties:\n        var _this = this;\n\n        var _domElement = document.getElementById(selectorId);\n\n        var _size = {\n\n            width: 0,\n            height: 0\n        };\n        var _mouse = {\n            \n            x: EXIT_COORDS.X,\n            y: EXIT_COORDS.Y\n        };\n\n        var _context;\n        var _points;\n        var _spacing;\n\n        var _color = $(_domElement).data(\"color\");\n\n    // Private methods:\n        var _getDistance = function(point1, point2)\n        {\n            return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n        };\n\n        var _getMin = function(num1, num2, num3)\n        {\n            if (num1 <= num3)\n            {\n                if (num2 <= num3)\n                {\n                    if (num1 <= num2)\n                    {\n                        return num1;\n                    }\n                    else\n                    {\n                        return num2;\n                    }\n                }\n                else\n                {\n                    return num1;\n                }\n            }\n            else if (num2 <= num3)\n            {\n                return num2;\n            }\n            else\n            {\n                return num3;\n            }\n        };\n\n    // Public methods:\n        this.initialize = function()\n        {\n            _domElement.width = _size.width;\n            _domElement.height = _size.height;\n\n            _context = _domElement.getContext(\"2d\");\n\n            // Initializing points...\n                _points = [];\n\n                for (var x = -1; (x * SPACING) < (_domElement.width + SPACING); x += 1)\n                {\n                    var row = [];\n\n                    for (var y = -1; (y * SPACING) < (_domElement.height + SPACING); y += 1)\n                    {\n                        var coordX = (x + Math.random()) * SPACING;\n                        var coordY = (y + Math.random()) * SPACING;\n\n                        row.push(new Point(coordX, coordY));\n                    }\n\n                    _points.push(row);\n                }\n\n            // Connecting points...\n                for (var x1 = 0; x1 < _points.length; x1 += 1)\n                {\n                    for (var y1 = 0; y1 < _points[x1].length; y1 += 1)\n                    {\n                        for (var x2 = 0; x2 < _points.length; x2 += 1)\n                        {\n                            for (var y2 = 0; y2 < _points[x2].length; y2 += 1)\n                            {\n                                if (_points[x1][y1] != _points[x2][y2])\n                                {\n                                    var linked = false;\n                                    var linkCount = 0;\n                                    var max_links = _getMin((_points.length - x1) + MIN_LINKS, (_points[x1].length - y1) + MIN_LINKS, MAX_LINKS);\n\n                                    do\n                                    {\n                                        if (_points[x1][y1].closest[linkCount] == undefined)\n                                        {\n                                            _points[x1][y1].closest.push(_points[x2][y2]);\n\n                                            linked = true;\n                                        }\n\n                                        linkCount += 1;\n                                    }\n                                    while ((linked == false) && (linkCount < max_links));\n\n                                    linkCount = 0;\n\n                                    while ((linked == false) && (linkCount < _points[x1][y1].closest.length))\n                                    {\n                                        if (_getDistance(_points[x1][y1], _points[x2][y2]) < _getDistance(_points[x1][y1], _points[x1][y1].closest[linkCount]))\n                                        {\n                                            _points[x1][y1].closest[linkCount] = _points[x2][y2];\n\n                                            linked = true;\n                                        }\n\n                                        linkCount += 1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n            // Initialization animations...\n                for (var x1 = 0; x1 < _points.length; x1 += 1)\n                {\n                    for (var y1 = 0; y1 < _points[x1].length; y1 += 1)\n                    {\n                        _points[x1][y1].startAnimation();\n                    }\n                }\n        };\n\n        this.updateFrame = function(timestamp)\n        {\n            _context.clearRect(0, 0, _domElement.width, _domElement.height);\n\n            _this.draw();\n\n            requestAnimationFrame(_this.updateFrame);\n        };\n\n        this.draw = function()\n        {\n            for (var x1 = 0; x1 < _points.length; x1 += 1)\n            {\n                for (var y1 = 0; y1 < _points[x1].length; y1 += 1)\n                {\n                    var pointDistance = _getDistance(_points[x1][y1], _mouse);\n\n                    if (pointDistance < DRAW_RANGE)\n                    {\n                        _context.beginPath();\n                        _context.arc(_points[x1][y1].x, _points[x1][y1].y, _points[x1][y1].size, 0, 2 * Math.PI, false);\n                        _context.fillStyle = \"rgba(\" + _color + \", \" + (1 - (pointDistance / DRAW_RANGE)) + \")\";\n                        _context.fill();\n                        _context.closePath();\n                    }\n\n                    for (var i = 0; i < _points[x1][y1].closest.length; i += 1)\n                    {\n                        var startingDistance = _getDistance(_points[x1][y1], _mouse);\n                        var endingDistance = _getDistance(_points[x1][y1].closest[i], _mouse);\n\n                        if ((startingDistance < DRAW_RANGE) || (endingDistance < DRAW_RANGE))\n                        {\n                            var gradient = _context.createLinearGradient(_points[x1][y1].x, _points[x1][y1].y, _points[x1][y1].closest[i].x, _points[x1][y1].closest[i].y);\n\n                            gradient.addColorStop(0, \"rgba(\" + _color + \", \" + (1 - (startingDistance / DRAW_RANGE)) + \")\");\n                            gradient.addColorStop(1, \"rgba(\" + _color + \", \" + (1 - (endingDistance / DRAW_RANGE)) + \")\");\n\n                            _context.beginPath();\n                            _context.moveTo(_points[x1][y1].x, _points[x1][y1].y);\n                            _context.lineTo(_points[x1][y1].closest[i].x, _points[x1][y1].closest[i].y);\n                            _context.strokeStyle = gradient;\n                            _context.stroke();\n                            _context.closePath();\n                        }\n                    }\n                }\n            }\n        };\n\n    // Start executions...\n        requestAnimationFrame(_this.updateFrame);\n\n    // Listening for events...\n        // Mouse events:\n            $(window).mousemove(function(event)\n            {\n                _mouse.x = event.clientX;\n                _mouse.y = event.clientY; // + $(document).scrollTop();\n            });\n\n            $(window).mouseout(function(event)\n            {\n                _mouse = {\n                    \n                    x: EXIT_COORDS.X,\n                    y: EXIT_COORDS.Y\n                };\n            });\n\n            $(window).resize(function()\n            {\n                var newWidth = $(window).width();\n                var newHeight = $(window).height();\n\n                if ((_size.width != newWidth) || (_size.height != newHeight))\n                {\n                    _size.width = newWidth;\n                    _size.height = newHeight;\n\n                    for (var x1 = 0; x1 < _points.length; x1 += 1)\n                    {\n                        for (var y1 = 0; y1 < _points[x1].length; y1 += 1)\n                        {\n                            _points[x1][y1].killAnimation();\n                        }\n                    }\n\n                    _this.initialize();\n                }\n            });\n        };\n"]}